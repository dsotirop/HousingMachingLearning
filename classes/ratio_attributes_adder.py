# This class file provides the implementation for a custom data transformer 
# that can work seamlessly with functionalities provided by the Scikit-Learn 
# library such as pipelines. Its primary purpose is to augment the initial  
# feature set of a given dataset by considering ratios of the original data 
# columns.

# Taking into consideration the fact that Scikit-Learn relies on duck typing 
# (not inheritance), the only requiremnt is to create a class and implement the
# following three methods:
# [i]   fit() returning self
# [ii]  transform()
# [iii] fit_transform()

# A free implementation of the third method can be integrated by adding 
# TransformerMixin as a base class. Moreover, by adding BaseEstimator as a base
# class, we can get a free implementation for the following methods:
# [i]  get_params()
# [ii] set_params()
# that can be utilized for automatic hyperparameter tuning.


# Import all the required Python modules.
from sklearn.base import BaseEstimator, TransformerMixin
import numpy as np

# Class Implementation Code:
class RatioAttributesAdder(BaseEstimator, TransformerMixin):
    # The main purpose of this class is to to extend the set of features 
    # associated with a given dataset. The new feature combinations will be 
    # generated by considering ratios of the pre-existing features. Each new 
    # feature will be designated as a tuple of the original feature indices
    # of the following form:
    # new_feaure_tuple = (feature_nominator_index,feature_denominator_index)
    # indicating that the new feature will be computed as:
    # new_feauture = feature_nominator / feature_denominator
    def __init__(self, feature_pairs):
        # feature_pairs is a list of feature indices tuples defining the new 
        # features to be added in the dataset.
        self.feature_pairs = feature_pairs
    
    def fit(self, X, y=None):
        return self
    
    def transform(self, X):
        for (nom_idx,denom_idx) in self.feature_pairs:
            X = np.c_[X,X[:,nom_idx]/X[:,denom_idx]]
        return X